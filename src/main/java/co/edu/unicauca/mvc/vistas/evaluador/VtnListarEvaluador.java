package co.edu.unicauca.mvc.vistas.evaluador;

import co.edu.unicauca.mvc.controladores.ArticuloServicio;
import co.edu.unicauca.mvc.controladores.EvaluadorServicio;
import javax.swing.table.DefaultTableModel;
import co.edu.unicauca.mvc.modelos.Articulo;
import co.edu.unicauca.mvc.modelos.Evaluador;
import co.edu.unicauca.mvc.utilidades.Utilidades;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JButton;
import javax.swing.JFrame;

/**
 *
 * @author Mary
 */

/**
 * Clase VtnListarEvaluador.
 * 
 * Esta clase representa una ventana interna (JInternalFrame) que permite 
 * listar, eliminar y actualizar evaluadores en la aplicación.
 */

public class VtnListarEvaluador extends javax.swing.JInternalFrame {
    // Atributos para los servicios utilizados en la clase
    public ArticuloServicio objServicio; // Servicio para gestionar artículos.
    public EvaluadorServicio objServicio4; // Servicio para gestionar evaluadores.
    
    /**
     * Constructor de la clase VtnListarEvaluador.
     * 
     * Inicializa la ventana y asigna los servicios de artículos y evaluadores.
     * También configura el renderizador de la tabla y llama al método para 
     * inicializar la tabla.
     * 
     * @param objServicio Instancia del servicio de artículos.
     * @param objServicio4 Instancia del servicio de evaluadores.
     */
    
    public VtnListarEvaluador(
            ArticuloServicio objServicio,
            EvaluadorServicio objServicio4) {
        // Inicializa los componentes de la ventana.
        initComponents();
        this.objServicio=objServicio;  // Asigna el servicio de artículos.
        this.objServicio4=objServicio4; // Asigna el servicio de evaluadores.
        this.jTableListarEvaluadores.setDefaultRenderer(Object.class, new RenderE()); // Configura el renderizador de la tabla.
        // Llama al método para inicializar la tabla.
        inicializarTabla();
    }
    
    /**
     * Inicializa la tabla para listar evaluadores.
     * 
     * Configura el modelo de la tabla, añadiendo las columnas necesarias:
     * "Id", "Nombre", "Apellido", "Eliminar" y "Actualizar".
     */
    
     private void inicializarTabla()
    {
       DefaultTableModel model= new DefaultTableModel();       
       model.addColumn("Id");       
       model.addColumn("Nombre");
       model.addColumn("Apellido");
       model.addColumn("Eliminar");
       model.addColumn("Actualizar");       
       this.jTableListarEvaluadores.setModel(model);
    }
     /**
     * Limpia la tabla de evaluadores.
     * 
     * Elimina todas las filas de la tabla actual.
     */
     public void limpiarTabla(){
        
        DefaultTableModel modelo=(DefaultTableModel) this.jTableListarEvaluadores.getModel();
        int filas=this.jTableListarEvaluadores.getRowCount();
        for (int i = 0;filas>i; i++) {
            modelo.removeRow(0);
        }        
    }
     /**
     * Llena la tabla con los datos de los evaluadores.
     * 
     * Limpia la tabla y luego obtiene la lista de evaluadores del servicio, 
     * añadiendo los datos a la tabla junto con botones de "Eliminar" y "Actualizar".
     */
    private void llenarTabla()
    {
        DefaultTableModel model=(DefaultTableModel) this.jTableListarEvaluadores.getModel();
        limpiarTabla();
        ArrayList<Evaluador> listarEvaluadores
                = (ArrayList<Evaluador>) this.objServicio4.listarEvaluadores();
        // Crea un botón para eliminar evaluadores.
        JButton JButtonEliminarEvaluador = new JButton();
        JButtonEliminarEvaluador.setName("Eliminar");
        JButtonEliminarEvaluador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/remove.png")));
        // Crea un botón para actualizar evaluadores.
        JButton JButtonActualizarEvaluador = new JButton();
        JButtonActualizarEvaluador.setName("Actualizar");
        JButtonActualizarEvaluador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/aplicar.png")));

        // Recorre la lista de evaluadores y añade sus datos a la tabla.
        for (int i = 0; i < listarEvaluadores.size(); i++) {
            Object [] fila= { 
                listarEvaluadores.get(i).getId(),
                listarEvaluadores.get(i).getNombre(),
                listarEvaluadores.get(i).getApellido(),
                listarEvaluadores.get(i).getTemas(),
                JButtonEliminarEvaluador,
                JButtonActualizarEvaluador};
            model.addRow(fila);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelSuperior = new javax.swing.JPanel();
        jLabelGestionarE = new javax.swing.JLabel();
        jPanelInferior = new javax.swing.JPanel();
        jPanelCentral = new javax.swing.JPanel();
        jButtonActualizar = new javax.swing.JButton();
        jButtonRegistrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListarEvaluadores = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jPanelSuperior.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelGestionarE.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabelGestionarE.setText("Gestionar Evaluadores");

        javax.swing.GroupLayout jPanelSuperiorLayout = new javax.swing.GroupLayout(jPanelSuperior);
        jPanelSuperior.setLayout(jPanelSuperiorLayout);
        jPanelSuperiorLayout.setHorizontalGroup(
            jPanelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSuperiorLayout.createSequentialGroup()
                .addContainerGap(200, Short.MAX_VALUE)
                .addComponent(jLabelGestionarE)
                .addContainerGap(202, Short.MAX_VALUE))
        );
        jPanelSuperiorLayout.setVerticalGroup(
            jPanelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSuperiorLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabelGestionarE)
                .addGap(15, 15, 15))
        );

        getContentPane().add(jPanelSuperior, java.awt.BorderLayout.PAGE_START);

        jPanelInferior.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanelInferiorLayout = new javax.swing.GroupLayout(jPanelInferior);
        jPanelInferior.setLayout(jPanelInferiorLayout);
        jPanelInferiorLayout.setHorizontalGroup(
            jPanelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 542, Short.MAX_VALUE)
        );
        jPanelInferiorLayout.setVerticalGroup(
            jPanelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelInferior, java.awt.BorderLayout.PAGE_END);

        jPanelCentral.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButtonActualizar.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jButtonActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/comunicacion.png"))); // NOI18N
        jButtonActualizar.setText("Actualizar");
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });

        jButtonRegistrar.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jButtonRegistrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/asignar.png"))); // NOI18N
        jButtonRegistrar.setText("Registrar");
        jButtonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistrarActionPerformed(evt);
            }
        });

        jTableListarEvaluadores.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableListarEvaluadores.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTableListarEvaluadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableListarEvaluadores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableListarEvaluadoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableListarEvaluadores);

        javax.swing.GroupLayout jPanelCentralLayout = new javax.swing.GroupLayout(jPanelCentral);
        jPanelCentral.setLayout(jPanelCentralLayout);
        jPanelCentralLayout.setHorizontalGroup(
            jPanelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCentralLayout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(jPanelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelCentralLayout.createSequentialGroup()
                        .addComponent(jButtonActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonRegistrar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanelCentralLayout.setVerticalGroup(
            jPanelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCentralLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonActualizar)
                    .addComponent(jButtonRegistrar))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        getContentPane().add(jPanelCentral, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Maneja el evento de acción para el botón de actualizar.
     * 
     * Llama al método llenarTabla() para refrescar los datos mostrados.
     * 
     * @param evt Evento de acción que ocurre.
     */
    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        llenarTabla();
    }//GEN-LAST:event_jButtonActualizarActionPerformed

    /**
     * Maneja el evento de acción para el botón de registrar un nuevo evaluador.
     * 
     * Abre la ventana para registrar un nuevo evaluador.
     * 
     * @param evt Evento de acción que ocurre.
     */
    
    private void jButtonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarActionPerformed
        VtnRegistrarEvaluador objVtnRegistrarEvaluador=new VtnRegistrarEvaluador(objServicio4);
        objVtnRegistrarEvaluador.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        objVtnRegistrarEvaluador.setVisible(true);
    }//GEN-LAST:event_jButtonRegistrarActionPerformed
    
    /**
     * Maneja el evento de clic en la tabla de evaluadores.
     * 
     * Detecta si se ha hecho clic en un botón de "Eliminar" o "Actualizar"
     * y realiza la acción correspondiente.
     * 
     * @param evt Evento de mouse que ocurre.
     */
    
    private void jTableListarEvaluadoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListarEvaluadoresMouseClicked
        int column = this.jTableListarEvaluadores.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = evt.getY()/jTableListarEvaluadores.getRowHeight();
        
        if(row < jTableListarEvaluadores.getRowCount() && row >= 0 && column < jTableListarEvaluadores.getColumnCount() && column >= 0){
            Object value = jTableListarEvaluadores.getValueAt(row, column);
            
            if(value instanceof JButton){
                
                ((JButton)value).doClick();
                JButton boton = (JButton) value;
                
                String idEvaluador = jTableListarEvaluadores.getValueAt(row, 0).toString();
                int idEvaluadorConvertido=Integer.parseInt(idEvaluador);
                if(boton.getName().equals("Eliminar")){
                    try{  
                        if(Utilidades.mensajeConfirmacion("¿ Estás seguro de que quieres eliminar el evaluador con identificador " + idEvaluador + " " 
                            +" ?", "Confirmación") == 0){
                           boolean bandera=this.objServicio4.eliminarEvaluador(idEvaluadorConvertido);
                           if(bandera==true)
                           {
                               Utilidades.mensajeExito("El evaluador con identificador " + idEvaluadorConvertido + " fue eliminado exitosamente", "Evaluador eliminado");
                               llenarTabla();
                           }
                           else
                           {
                               Utilidades.mensajeAdvertencia("El evaluador con identificador " + idEvaluadorConvertido + " no fue eliminado", "Error al eliminar");
                        
                           }
                        }
                    }catch(Exception ex){
                        Utilidades.mensajeError("Error al eliminar usuario. Intentelo de nuevo más tarde", "Error");
                    }  
                }
                else if(boton.getName().equals("Actualizar")){
                    VtnActualizarEvaluador objVtnActualizarEvaluador= 
                            new VtnActualizarEvaluador(objServicio, objServicio4);
                    objVtnActualizarEvaluador.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    objVtnActualizarEvaluador.cargarDatos(idEvaluadorConvertido);
                    objVtnActualizarEvaluador.setVisible(true);
                            
                }
            }
        }
    }//GEN-LAST:event_jTableListarEvaluadoresMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonRegistrar;
    private javax.swing.JLabel jLabelGestionarE;
    private javax.swing.JPanel jPanelCentral;
    private javax.swing.JPanel jPanelInferior;
    private javax.swing.JPanel jPanelSuperior;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableListarEvaluadores;
    // End of variables declaration//GEN-END:variables
}
