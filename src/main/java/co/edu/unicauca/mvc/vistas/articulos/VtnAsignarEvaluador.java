package co.edu.unicauca.mvc.vistas.articulos;

import co.edu.unicauca.mvc.controladores.ArticuloServicio;
import co.edu.unicauca.mvc.controladores.EvaluadorServicio;
import co.edu.unicauca.mvc.modelos.Evaluador;
import co.edu.unicauca.mvc.utilidades.Utilidades;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SANTIAGO DORADO
 */

/**
 * Clase VtnAsignarEvaluador
 * 
 * Esta clase representa una ventana de la interfaz gráfica de usuario para asignar evaluadores a un artículo
 * en un sistema de gestión de conferencias.
 * 
 * Hereda de javax.swing.JFrame y utiliza los servicios de ArticuloServicio y EvaluadorServicio para manejar 
 * la lógica de negocio relacionada con los artículos y los evaluadores respectivamente.
 */

public class VtnAsignarEvaluador extends javax.swing.JFrame {

    private EvaluadorServicio objSEvaluador;
    private ArrayList<Evaluador> listEvaluadores;
    private ArticuloServicio objSArticulo;
    private int indice;

    /**
     * Constructor de la clase VtnAsignarEvaluador
     * 
     * @param objSArticulo Objeto del servicio de artículos para manejar la lógica relacionada con los artículos.
     * @param objSEvaluador Objeto del servicio de evaluadores para manejar la lógica relacionada con los evaluadores.
     * @param indice Índice del artículo al que se le asignarán evaluadores.
     */
    public VtnAsignarEvaluador(ArticuloServicio objSArticulo, EvaluadorServicio objSEvaluador, int indice) {
        initComponents();
        this.objSArticulo = objSArticulo;
        this.objSEvaluador = objSEvaluador;
        this.indice = indice;
        listEvaluadores = (ArrayList<Evaluador>) objSEvaluador.listarEvaluadores();
        llenarTabla();
    }
    /**
     * Obtiene la lista de evaluadores seleccionados en la tabla.
     * 
     * @param tabla JTable que contiene los evaluadores.
     * @return ArrayList<Evaluador> Lista de evaluadores seleccionados.
     */
    public ArrayList<Evaluador> obtenerSeleccionados(JTable tabla) {
        ArrayList<Evaluador> evaluadoresSeleccionados = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();

        // Recorrer las filas para verificar cuáles están seleccionadas
        for (int i = 0; i < model.getRowCount(); i++) {
            Object isSelected = (Boolean) model.getValueAt(i, 4);

            if (isSelected != null && (Boolean) isSelected) {
                Evaluador evaluador = listEvaluadores.get(i);
                evaluadoresSeleccionados.add(evaluador);
            }
        }
        return evaluadoresSeleccionados;
    }
     
    /**
     * Limpia la tabla de evaluadores.
     */

    public void limpiarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) this.jTableEvaluadores.getModel();
        int filas = this.jTableEvaluadores.getRowCount();
        for (int i = 0; filas > i; i++) {
            modelo.removeRow(0);
        }
    }
    /**
     * Llena la tabla con la lista de evaluadores disponibles.
     */
    public void llenarTabla() {
        DefaultTableModel model = (DefaultTableModel) this.jTableEvaluadores.getModel();
        limpiarTabla();
        ArrayList<Evaluador> listEvaluadores = (ArrayList<Evaluador>) this.objSEvaluador.listarEvaluadores();

        for (int i = 0; i < listEvaluadores.size(); i++) {
            Object[] fila = {
                listEvaluadores.get(i).getId(),
                listEvaluadores.get(i).getNombre(),
                listEvaluadores.get(i).getApellido(),
                listEvaluadores.get(i).getCorreo()
            };
            model.addRow(fila);
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblArticulo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEvaluadores = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnAsignar = new javax.swing.JButton();
        lblId = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel1.setText("Asignar evaluador");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel2.setText("Evaluadores");

        lblArticulo.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        lblArticulo.setText("nombreArticulo");

        jTableEvaluadores.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTableEvaluadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Apellido", "Correo", "Seleccionar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEvaluadores.setToolTipText("");
        jScrollPane2.setViewportView(jTableEvaluadores);

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel3.setText("Articulo:");

        btnAsignar.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        btnAsignar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/asignar.png"))); // NOI18N
        btnAsignar.setText("Asignar");
        btnAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarActionPerformed(evt);
            }
        });

        lblId.setText("id");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAsignar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(196, 196, 196)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblArticulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblId)
                        .addGap(75, 75, 75)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblArticulo)
                    .addComponent(lblId)
                    .addComponent(jLabel3))
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAsignar)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Acción a realizar cuando se presiona el botón Asignar.
     * Verifica los evaluadores seleccionados y los asigna al artículo.
     * 
     * @param evt Evento de acción.
     */
    private void btnAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarActionPerformed
        boolean bandera;
        ArrayList<Evaluador> listEvaluadores = obtenerSeleccionados(jTableEvaluadores);
        
        bandera = this.objSArticulo.asignarEvaluador(this.indice, listEvaluadores);

        if (bandera == true) {
            Utilidades.mensajeExito("Asignación exitosa", "Registro exitoso");
            dispose();
        } else {
            Utilidades.mensajeError("Asignación no almacenada", "Error al almacenar el evaluador");
        }
    }//GEN-LAST:event_btnAsignarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAsignar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableEvaluadores;
    public javax.swing.JLabel lblArticulo;
    public javax.swing.JLabel lblId;
    // End of variables declaration//GEN-END:variables
}
